name: Validate JSON

on:
  pull_request:
    paths:
      - 'data/*.json'  # Only run when JSON files in data directory change

jobs:
  validate-json:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write  # Required to comment on PRs
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Create validation script
        run: |
          cat > validate-json.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          // Store validation errors for PR comment
          let validationErrors = [];

          // Schema for contributor JSON files
          const schema = {
            required: ['name', 'role', 'description', 'github'],
            maxLength: {
              description: 100
            }
          };

          // Validate a single JSON file
          function validateFile(filePath) {
            try {
              const content = fs.readFileSync(filePath, 'utf8');
              const data = JSON.parse(content);
              
              // Check required fields
              for (const field of schema.required) {
                if (!data[field]) {
                  throw new Error(`Missing required field: ${field}`);
                }
                if (typeof data[field] !== 'string') {
                  throw new Error(`Field ${field} must be a string`);
                }
                if (data[field].trim() === '') {
                  throw new Error(`Field ${field} cannot be empty`);
                }
              }
              
              // Check description length
              if (data.description.length > schema.maxLength.description) {
                throw new Error(`Description must be under ${schema.maxLength.description} characters`);
              }
              
              // Validate GitHub username format
              if (!/^[a-zA-Z0-9-]+$/.test(data.github)) {
                throw new Error('Invalid GitHub username format');
              }
              
              // Validate Twitter handle if present
              if (data.twitter && !/^[a-zA-Z0-9_]+$/.test(data.twitter)) {
                throw new Error('Invalid Twitter handle format');
              }
              
              return true;
            } catch (error) {
              validationErrors.push(`Error in ${path.basename(filePath)}: ${error.message}`);
              return false;
            }
          }

          // Validate all JSON files in data directory
          const dataDir = path.join(__dirname, 'data');
          const files = fs.readdirSync(dataDir)
            .filter(file => file.endsWith('.json'));

          let hasErrors = false;

          files.forEach(file => {
            const filePath = path.join(dataDir, file);
            
            // Validate filename matches GitHub username
            const username = file.replace('.json', '');
            const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
            
            if (username !== content.github.toLowerCase()) {
              validationErrors.push(`Error in ${file}: Filename must match GitHub username in lowercase`);
              hasErrors = true;
              return;
            }
            
            if (!validateFile(filePath)) {
              hasErrors = true;
            }
          });

          // Write validation errors to a file for GitHub Actions to read
          if (hasErrors) {
            fs.writeFileSync('validation-errors.txt', validationErrors.join('\n'));
          }
          // Exit with error code if validation failed
          process.exit(hasErrors ? 1 : 0);
          EOF

      - name: Validate JSON files
        id: validate
        continue-on-error: true
        run: node validate-json.js

      - name: Read validation errors
        if: steps.validate.outcome == 'failure'
        id: errors
        continue-on-error: true
        run: |
          if [ -f validation-errors.txt ]; then
            ERRORS=$(cat validation-errors.txt)
            echo "errors<<EOF" >> $GITHUB_ENV
            echo "$ERRORS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Comment on PR
        if: steps.validate.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const errors = process.env.errors || 'JSON validation failed';
            const message = `## ‚ùå JSON Validation Failed

            ${errors}

            ### How to fix:
            1. Review the errors above
            2. Make the necessary corrections to your JSON file
            3. Commit and push your changes
            4. The validation will run again automatically

            For more details, please check our [Contributing Guidelines](../blob/main/CONTRIBUTING.md).

            Need help? Feel free to ask questions in this PR.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

      - name: Fail workflow if validation failed
        if: steps.validate.outcome == 'failure'
        run: exit 1 